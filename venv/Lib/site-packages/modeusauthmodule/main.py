import re
import uuid

import httpx
import secrets

from bs4 import BeautifulSoup
from typing import Optional

from modeusauthmodule.types.app_config import AppConfig
from modeusauthmodule.types.urls import Urls
from modeusauthmodule.types.authentication.querys import (
    OAuth2Query,
    AdfsQuery,
)
from modeusauthmodule.types.authentication.params import (
    AdfsParams
)
from modeusauthmodule.types.authentication.responses import (
    AdfsResponse
)
from modeusauthmodule.types.authentication.Credentials import Credentials


class ModeusAuthModule:
    def __init__(self):
        self.client = httpx.Client(
            follow_redirects=False,
        )
        self.cookies = httpx.Cookies()
        self.TOKEN_LENGTH = 16

    def __get_app_config(self) -> AppConfig:
        response = self.client.get(url=Urls.app_config_json)

        self.cookies = response.cookies

        return AppConfig(**response.json())

    def __oauth2_request(self) -> str:
        app_config = self.__get_app_config()

        oauth2_query = OAuth2Query(
            client_id=app_config.wso.clientId,
            redirect_uri=app_config.wso.redirectUrl,
            state=secrets.token_hex(self.TOKEN_LENGTH),
            nonce=secrets.token_hex(self.TOKEN_LENGTH),
        ).dict()

        response = self.client.get(
            url=app_config.wso.loginUrl,
            params=oauth2_query,
            cookies=self.cookies
        )

        return response.headers['location']

    def __adfs_request(self, oauth2_url: str, credentials: Credentials) -> AdfsResponse:
        adfs_data = AdfsQuery(
            user_name=credentials.email,
            password=credentials.password
        ).dict(by_alias=True)

        adfs_params = AdfsParams(
            client_request_id=uuid.uuid4()
        ).dict(by_alias=True)

        response_oauth2 = self.client.post(
            oauth2_url,
            data=adfs_data,
            params=adfs_params,
        )

        response_html = self.client.get(
            url=response_oauth2.headers['location'],
            cookies=response_oauth2.cookies,
            timeout=None
        )

        html = BeautifulSoup(response_html.content, 'html.parser')

        auth_data = {}
        action_url = html.find('form').get('action')

        for el in html.find_all('input', type='hidden'):
            auth_data[el['name']] = el['value']

        return AdfsResponse(
            saml_response=auth_data['SAMLResponse'],
            relay_state=auth_data['RelayState'],
            action_url=action_url,
        )

    def __get_bearer_token(self, adfs_response: AdfsResponse) -> str:
        token_headers = {
            'Referer': Urls.base_url
        }

        response_auth = self.client.post(
            url=adfs_response.ActionUrl,
            data=adfs_response.dict(),
            headers=token_headers
        )

        location = response_auth.headers['location']
        j_session_id = response_auth.cookies.get('JSESSIONID')
        auth_id = response_auth.cookies.get('commonAuthId')
        tc01 = self.cookies.get('tc01')

        auth_cookie = httpx.Cookies()
        auth_cookie.set('JSESSIONID', j_session_id)
        auth_cookie.set('commonAuthId', auth_id)
        auth_cookie.set('tc01', tc01)

        response_token = self.client.get(url=location, cookies=auth_cookie)

        raw_token = response_token.headers['location']
        re_pattern = 'id_token=(.*)&state'
        token: Optional[str]

        try:
            token: str = re.findall(re_pattern, raw_token)[0]
        except IndexError:
            token = None

        return token

    def login(self, credentials: Credentials) -> str:
        oauth2_url = self.__oauth2_request()
        adfs_response = self.__adfs_request(oauth2_url, credentials)
        token = self.__get_bearer_token(adfs_response)

        return token
